{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"5BY343yyZfSj"},"outputs":[],"source":["%config IPCompleter.greedy=True"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DPgkHTQwqu65","executionInfo":{"status":"ok","timestamp":1686490552928,"user_tz":-330,"elapsed":25002,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"}},"outputId":"654bd145-9695-489a-867e-a2355e314fad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4917,"status":"ok","timestamp":1686490563363,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"qddceq64ZugK","outputId":"a213009d-87e9-4ca1-917a-e4e97205e691"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting ffmpeg-python\n","  Downloading ffmpeg_python-0.2.0-py3-none-any.whl (25 kB)\n","Requirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from ffmpeg-python) (0.18.3)\n","Installing collected packages: ffmpeg-python\n","Successfully installed ffmpeg-python-0.2.0\n"]}],"source":["!pip install ffmpeg-python\n","import librosa\n","import librosa.display\n","import numpy as np\n","import pandas as pd\n","import ffmpeg as ff\n","import os\n","from typing import List, Tuple, Dict\n","import matplotlib.pyplot as plt\n","import random\n","import cv2\n","import pickle\n","import datetime"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y-T4ID-YMkCN"},"outputs":[],"source":["FILLER_WORDS = {'uhh':'uhh', 'um':'um', 'uh':'uh', 'umm':'umm',\n","                'like':'like', 'so':'so', 'think':'think', 'you':'you',\n","                'know':'know', 'ah':'ah', 'umhum':'umhum',\n","                'uhum':'uhum', 'uhm':'uhm', 'lot':'lot'}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J1SyFi3paKa6"},"outputs":[],"source":["def extract_audio_from_video(file_path: str) -> np.ndarray:\n","    inputfile = ff.input(file_path)\n","    out = inputfile.output('-', format='f32le', acodec='pcm_f32le', ac=1, ar='44100')\n","    raw = out.run(capture_stdout=True)\n","    del inputfile, out\n","    return np.frombuffer(raw[0],np.float32)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kTYyZXd2aZAf"},"outputs":[],"source":["def preprocess_audio_series(raw_data: np.ndarray) -> np.ndarray:\n","    N, M = 24, 1319\n","    mfcc_data = librosa.feature.mfcc(raw_data, n_mfcc= 24)\n","\n","    #Getting spectral mean (centroid)\n","    #mean = librosa.feature.spectral_centroid(result)\n","\n","    #Standardizing MFCC (zero mean and unit variance)\n","    mfcc_data_standardized = (mfcc_data - np.mean(mfcc_data)) / np.std(mfcc_data)\n","\n","    # Use pre-padding (Note: with 0, which is also the mean after standardization) to unify the length of the samples.\n","    number_of_columns_to_fill = M - mfcc_data_standardized.shape[1]\n","    padding = np.zeros((N,number_of_columns_to_fill))\n","\n","    padded_data = np.hstack((padding, mfcc_data_standardized))\n","\n","    #Reshaping to N,M,1\n","    return padded_data.reshape(N,M,1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"koImdfIsanrS"},"outputs":[],"source":["def get_number_of_frames(file_path: str) -> int:\n","    probe = ff.probe(filePath)\n","    video_streams = [stream for stream in probe[\"streams\"] if stream[\"codec_type\"] == \"video\"]\n","    #width = video_streams[0]['coded_width']\n","    #height = video_streams[0]['coded_height']\n","    del probe\n","    return video_streams[0]['nb_frames']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iQyuuGelaymy"},"outputs":[],"source":["def extract_N_video_frames(file_path: str, number_of_samples: int = 6) -> List[np.ndarray]:\n","    nb_frames = int(get_number_of_frames(file_path= filePath))\n","\n","    video_frames = []\n","    random_indexes = random.sample(range(0, nb_frames), number_of_samples)\n","\n","    cap = cv2.VideoCapture(filePath)\n","    for ind in random_indexes:\n","        cap.set(1,ind)\n","        res, frame = cap.read()\n","        video_frames.append(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))\n","    cap.release()\n","    del cap, random_indexes\n","    return video_frames"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_zCkrIZ9a2U9"},"outputs":[],"source":["def resize_image(image: np.ndarray, new_size: Tuple[int,int]) -> np.ndarray:\n","    return cv2.resize(image, new_size, interpolation = cv2.INTER_AREA)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hEVBDbpya8yK"},"outputs":[],"source":["def crop_image_window(image: np.ndarray, training: bool = True) -> np.ndarray:\n","    height, width, _ = image.shape\n","    if training:\n","        MAX_N = height - 128\n","        MAX_M = width - 128\n","        rand_N_index, rand_M_index = random.randint(0, MAX_N) , random.randint(0, MAX_M)\n","        return image[rand_N_index:(rand_N_index+128),rand_M_index:(rand_M_index+128),:]\n","    else:\n","        N_index = (height - 128) // 2\n","        M_index = (width - 128) // 2\n","        return image[N_index:(N_index+128),M_index:(M_index+128),:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jcqxjAMqbBeu"},"outputs":[],"source":["def reading_label_data(file_name: str, dictionary: Dict[str,str]) -> np.ndarray:\n","    features = ['extraversion', 'neuroticism', 'agreeableness', 'conscientiousness', 'openness']\n","    extracted_data = [float(dictionary[label][file_name]) for label in features]\n","    return np.stack(extracted_data).reshape(5,1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jvgooxInKMVL"},"outputs":[],"source":["def ExtractTranscriptFeatures(file_name: str, training: bool = True) -> Tuple[np.ndarray]:\n","  word_features = {}\n","  for k in transcript:\n","    words = transcript[k].split(\" \")\n","    #print(words)\n","    unique_words = {}\n","    filler_count = 0\n","    for w in words:\n","      unique_words[w] = 1\n","      if w in FILLER_WORDS:\n","        filler_count += 1\n","\n","    word_features[k] = {}\n","    word_features[k][\"transcript\"] = transcript[filename]\n","    word_features[k][\"total_words\"] = float(len(words))\n","    word_features[k][\"unique_words\"] = float(len(unique_words))\n","    word_features[k][\"total_to_unique\"] = float(len(words)) / float(len(unique_words))\n","    #word_features[k][\"filler\"] = float(filler_count) / float(len(words))\n","\n","  return word_features"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6C_6SdcybFWz"},"outputs":[],"source":["def preprocessing_input(file_path: str, file_name: str, dictionary: Dict[str,str], training: bool = True) -> Tuple[np.ndarray,np.ndarray,np.ndarray]:\n","    #Audio\n","    extracted_audio_raw = extract_audio_from_video(file_path= filePath)\n","    preprocessed_audio = preprocess_audio_series(raw_data= extracted_audio_raw)\n","\n","    #Video\n","    sampled = extract_N_video_frames(file_path= filePath, number_of_samples= 6)\n","    resized_images = [resize_image(image= im, new_size= (248,140)) for im in sampled]\n","    cropped_images = [crop_image_window(image= resi,training= training) / 255.0 for resi in resized_images]\n","    preprocessed_video = np.stack(cropped_images)\n","\n","    #transcription_features\n","    preprocessed_word = ExtractTranscriptFeatures(file_name= filename)\n","    #preprocessed_word = transcript[filename]\n","    #transcription = transcript[filePath]\n","\n","    #Ground Truth\n","    video_gt = reading_label_data(file_name= file_name, dictionary= dictionary)\n","    del extracted_audio_raw, sampled, resized_images, cropped_images\n","    return (preprocessed_audio, preprocessed_video, preprocessed_word, video_gt)"]},{"cell_type":"markdown","metadata":{"id":"rvx9VvMMV91X"},"source":["**Preparing Training Set**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tRuXcnpIWBV0"},"outputs":[],"source":["training_set_data = []\n","path = '/content/drive/MyDrive/Colab Notebooks/dataset/train_test'\n","#transcription_training = \"/content/gdrive/MyDrive/Colab Notebooks/dataset/transcription/transcription_training.pkl\"\n","#transcript = LoadTranscriptFile(transcription_training)\n","gt = pickle.load(open( \"/content/drive/MyDrive/Colab Notebooks/dataset/gt/annotation_training.pkl\", \"rb\" ), encoding='latin1' )\n","t1 = datetime.datetime.utcnow()\n","for filename in os.listdir(path):\n","    filePath = path+'/'+filename\n","    training_set_data.append(preprocessing_input(file_path= filePath, file_name= filename, dictionary= gt, training= True))\n","t2 = datetime.datetime.utcnow()\n","#Measuring execution time\n","print('Elapsed time: ' + str(t2-t1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aHqx0z-wWyz_"},"outputs":[],"source":["savename = '/content/gdrive/MyDrive/Colab Notebooks/dataset/training_set.dat'\n","with open(savename, \"wb\") as f:\n","    pickle.dump(training_set_data, f)"]},{"cell_type":"markdown","metadata":{"id":"mhPPi_XOfxR2"},"source":["**Preparing Validation Set**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":106161,"status":"ok","timestamp":1661452133603,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"q0pawJK8f56C","outputId":"e6003be5-b8f8-4316-a8ca-6e0df0278b79"},"outputs":[{"name":"stdout","output_type":"stream","text":["Number of transcripts: 2000\n","Elapsed time: 0:01:43.655101\n"]}],"source":["validation_set_data = []\n","path = '/content/gdrive/MyDrive/Colab Notebooks/dataset/valid'\n","transcription_val = \"/content/gdrive/MyDrive/Colab Notebooks/dataset/transcription/transcription_validation.pkl\"\n","transcript = LoadTranscriptFile(transcription_val)\n","gt = pickle.load(open( \"/content/gdrive/MyDrive/Colab Notebooks/dataset/gt/annotation_validation.pkl\", \"rb\" ), encoding='latin1' )\n","t1 = datetime.datetime.utcnow()\n","for filename in os.listdir(path):\n","    filePath = path+'/'+filename\n","    validation_set_data.append(preprocessing_input(file_path= filePath, file_name= filename,dictionary= gt, training= True))\n","t2 = datetime.datetime.utcnow()\n","#Measuring execution time\n","print('Elapsed time: ' + str(t2-t1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"els6tCguhZQ4"},"outputs":[],"source":["savename = '/content/gdrive/MyDrive/Colab Notebooks/dataset/validation_set.dat'\n","with open(savename, \"wb\") as f:\n","    pickle.dump(validation_set_data, f)"]},{"cell_type":"markdown","metadata":{"id":"dZNglc_mhhla"},"source":["**Preparing Test Set**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":86536,"status":"ok","timestamp":1661452285916,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"3omfyE_7hpU0","outputId":"b050529b-d8bb-4557-bb6c-3d0272a75c51"},"outputs":[{"name":"stdout","output_type":"stream","text":["Number of transcripts: 2000\n","Elapsed time: 0:01:25.231551\n"]}],"source":["test_set_data = []\n","path = '/content/gdrive/MyDrive/Colab Notebooks/dataset/test'\n","transcription_val = \"/content/gdrive/MyDrive/Colab Notebooks/dataset/transcription/transcription_test.pkl\"\n","transcript = LoadTranscriptFile(transcription_val)\n","gt = pickle.load(open( \"/content/gdrive/MyDrive/Colab Notebooks/dataset/gt/annotation_test.pkl\", \"rb\" ), encoding='latin1' )\n","t1 = datetime.datetime.utcnow()\n","for filename in os.listdir(path):\n","    filePath = path+'/'+filename\n","    test_set_data.append(preprocessing_input(file_path= filePath, file_name= filename, dictionary= gt, training= True))\n","t2 = datetime.datetime.utcnow()\n","#Measuring execution time\n","print('Elapsed time: ' + str(t2-t1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rSzztesoiaf0"},"outputs":[],"source":["savename = '/content/gdrive/MyDrive/Colab Notebooks/dataset/test_set.dat'\n","with open(savename, \"wb\") as f:\n","    pickle.dump(test_set_data, f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zJ8xdy4PCsX1"},"outputs":[],"source":["training_data = '/content/gdrive/MyDrive/Colab Notebooks/dataset/training_set.dat'\n","validation_data = '/content/gdrive/MyDrive/Colab Notebooks/dataset/validation_set.dat'\n","#test_data = '/content/gdrive/MyDrive/Colab Notebooks/dataset/test_set.dat'\n","#annotation_training = \"/content/gdrive/MyDrive/Colab Notebooks/dataset/gt/annotation_training.pkl\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9yZbEV3NcCNe"},"outputs":[],"source":["with open(training_data, \"rb\") as training_file:\n","    train_set_data = pickle.load(training_file)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z2PKz0GvcJYJ"},"outputs":[],"source":["with open(validation_data, \"rb\") as validation_file:\n","    validation_set_data = pickle.load(validation_file)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xQ0B2bfcMYk"},"outputs":[],"source":["with open(test_data, \"rb\") as test_file:\n","    test_set_data = pickle.load(test_file)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":1852,"status":"ok","timestamp":1661452322577,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"QHCar1YPcPUD","outputId":"792d215d-98aa-4ca7-d960-30289cfd856e"},"outputs":[{"data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fbf3c6d8c90>"]},"execution_count":25,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["gt = pickle.load( open( annotation_training, \"rb\" ), encoding='latin1' )\n","neuroticism = list(gt['neuroticism'].values())\n","extraversion = list(gt['extraversion'].values())\n","agreeableness = list(gt['agreeableness'].values())\n","conscientiousness = list(gt['conscientiousness'].values())\n","openness = list(gt['openness'].values())\n","\n","df = pd.DataFrame({'neuroticism': neuroticism,'extraversion': extraversion,'agreeableness':agreeableness,'conscientiousness':conscientiousness,'openness':openness})\n","df.plot(kind='density',xlim=(0,1))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":515,"status":"ok","timestamp":1661713721020,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"pTgiZ-hicSmV","outputId":"1eb71b95-aa61-4f17-9e97-9d3f75dd38e3"},"outputs":[{"output_type":"stream","name":"stdout","text":["4188\n","1042\n"]}],"source":["print(len(train_set_data))\n","print(len(validation_set_data))\n","#print(len(test_set_data))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rtjZNoIgcYXb"},"outputs":[],"source":["train_random_index = random.randint(0, len(train_set_data)-1)\n","validation_random_index = random.randint(0, len(validation_set_data)-1)\n","test_random_index = random.randint(0, len(test_set_data)-1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MHkLhPRbccQl"},"outputs":[],"source":["def reshape_to_expected_input(dataset: List[Tuple[np.ndarray,np.ndarray,np.ndarray,np.ndarray]]) -> Tuple[np.ndarray,np.ndarray,np.ndarray,np.ndarray]:\n","\n","    x0_list = []\n","    x1_list = []\n","    x2_list = []\n","    y_list = []\n","    for i in range(0,len(dataset)):\n","        x0_list.append(dataset[i][0])\n","        x1_list.append(dataset[i][1])\n","        x2_list.append(dataset[i][2])\n","        y_list.append(dataset[i][3])\n","    return (np.stack(x0_list),np.stack(x1_list),np.stack(x2_list),np.stack(y_list))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3pYhK57ucokQ"},"outputs":[],"source":["train_input = reshape_to_expected_input(dataset= train_set_data)\n","del train_set_data\n","validation_input = reshape_to_expected_input(dataset= validation_set_data)\n","del validation_set_data\n","test_input = reshape_to_expected_input(dataset= test_set_data)\n","del test_set_data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s-bFZCGRcrVU"},"outputs":[],"source":["from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Dense, Flatten, Input, LSTM, Bidirectional, Lambda, Dropout, Concatenate\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D\n","from tensorflow.keras.layers import BatchNormalization\n","from tensorflow.keras.layers import TimeDistributed"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F5Ms7IZbcwPJ"},"outputs":[],"source":["audio_input = Input(shape=(24,1320,1))\n","audio_model = Conv2D(32, kernel_size=(3,3),activation='relu')(audio_input)\n","audio_model = BatchNormalization()(audio_model)\n","audio_model = MaxPooling2D(pool_size=(2, 2))(audio_model)\n","audio_model = Conv2D(32, kernel_size=(3,3),activation='relu')(audio_model)\n","audio_model = BatchNormalization()(audio_model)\n","audio_model = MaxPooling2D(pool_size=(2, 2))(audio_model)\n","audio_model = Flatten()(audio_model)\n","audio_model = Dense(128, activation='relu')(audio_model)\n","audio_subnetwork = Model(inputs=audio_input,outputs=audio_model)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2075,"status":"ok","timestamp":1661452395097,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"cCAXV6_ac0p6","outputId":"1d440237-7c06-4b39-d185-36f8c9ea5c1c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58892288/58889256 [==============================] - 1s 0us/step\n","58900480/58889256 [==============================] - 1s 0us/step\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:\n","The following Variables were used a Lambda layer's call (lambda), but\n","are not present in its tracked objects:\n","  <tf.Variable 'block1_conv1/kernel:0' shape=(3, 3, 3, 64) dtype=float32>\n","  <tf.Variable 'block1_conv1/bias:0' shape=(64,) dtype=float32>\n","  <tf.Variable 'block1_conv2/kernel:0' shape=(3, 3, 64, 64) dtype=float32>\n","  <tf.Variable 'block1_conv2/bias:0' shape=(64,) dtype=float32>\n","  <tf.Variable 'block2_conv1/kernel:0' shape=(3, 3, 64, 128) dtype=float32>\n","  <tf.Variable 'block2_conv1/bias:0' shape=(128,) dtype=float32>\n","  <tf.Variable 'block2_conv2/kernel:0' shape=(3, 3, 128, 128) dtype=float32>\n","  <tf.Variable 'block2_conv2/bias:0' shape=(128,) dtype=float32>\n","  <tf.Variable 'block3_conv1/kernel:0' shape=(3, 3, 128, 256) dtype=float32>\n","  <tf.Variable 'block3_conv1/bias:0' shape=(256,) dtype=float32>\n","  <tf.Variable 'block3_conv2/kernel:0' shape=(3, 3, 256, 256) dtype=float32>\n","  <tf.Variable 'block3_conv2/bias:0' shape=(256,) dtype=float32>\n","  <tf.Variable 'block3_conv3/kernel:0' shape=(3, 3, 256, 256) dtype=float32>\n","  <tf.Variable 'block3_conv3/bias:0' shape=(256,) dtype=float32>\n","  <tf.Variable 'block4_conv1/kernel:0' shape=(3, 3, 256, 512) dtype=float32>\n","  <tf.Variable 'block4_conv1/bias:0' shape=(512,) dtype=float32>\n","  <tf.Variable 'block4_conv2/kernel:0' shape=(3, 3, 512, 512) dtype=float32>\n","  <tf.Variable 'block4_conv2/bias:0' shape=(512,) dtype=float32>\n","  <tf.Variable 'block4_conv3/kernel:0' shape=(3, 3, 512, 512) dtype=float32>\n","  <tf.Variable 'block4_conv3/bias:0' shape=(512,) dtype=float32>\n","  <tf.Variable 'block5_conv1/kernel:0' shape=(3, 3, 512, 512) dtype=float32>\n","  <tf.Variable 'block5_conv1/bias:0' shape=(512,) dtype=float32>\n","  <tf.Variable 'block5_conv2/kernel:0' shape=(3, 3, 512, 512) dtype=float32>\n","  <tf.Variable 'block5_conv2/bias:0' shape=(512,) dtype=float32>\n","  <tf.Variable 'block5_conv3/kernel:0' shape=(3, 3, 512, 512) dtype=float32>\n","  <tf.Variable 'block5_conv3/bias:0' shape=(512,) dtype=float32>\n","It is possible that this is intended behavior, but it is more likely\n","an omission. This is a strong indication that this layer should be\n","formulated as a subclassed Layer rather than a Lambda layer.\n"]}],"source":["from keras.applications import vgg16\n","visual_model = Input(shape=(6,128,128,3))\n","\n","cnn = vgg16.VGG16(weights=\"imagenet\", include_top=False, pooling='max')\n","cnn.trainable = False\n","encoded_frame = TimeDistributed(Lambda(lambda x: cnn(x)))(visual_model)\n","encoded_vid = LSTM(64)(encoded_frame)\n","\n","visual_subnetwork = Model(inputs=visual_model,outputs=encoded_vid)"]},{"cell_type":"markdown","metadata":{"id":"oz8v9fphloIJ"},"source":["***Transcription Subnetwork***"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xed06MlzlzyO"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.model_selection import train_test_split\n","from tensorflow.python.keras import Sequential\n","from tensorflow.python.keras.layers import Dense, Embedding, LSTM, GRU, Flatten\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.utils.np_utils import to_categorical\n","from sklearn.preprocessing import LabelEncoder\n","from keras import optimizers\n","from tensorflow.python.keras import layers\n","import tensorflow as tf\n","from tensorflow import keras\n","from keras.layers import Input, LSTM, Dense, TimeDistributed, Activation, BatchNormalization, Dropout, Bidirectional"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bdzKTin5uFiB"},"outputs":[],"source":["#def dict_dims(dict):\n","#    d1 = len(dict)\n","#    d2 = 0\n","#    for d in df:\n","#        d2 = max(d2, len(d))\n","#    return d1, d2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mPHEk7cenqup"},"outputs":[],"source":["#df_shape = dict_dims(df)\n","#print(df_shape)\n","#print(len(df))\n","#for key, value in df.items():\n","#  print(key,value)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1949,"status":"ok","timestamp":1661452437265,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"orsxpsRcknAZ","outputId":"2fa0dbaa-5eaa-4916-a9b3-9531460b6457"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:The following Variables were used in a Lambda layer's call (tf.compat.v1.nn.embedding_lookup), but are not present in its tracked objects:   <tf.Variable 'embedding/embeddings:0' shape=(1, 256) dtype=float32>. This is a strong indication that the Lambda layer should be rewritten as a subclassed Layer.\n"]}],"source":["emb_dims = 256\n","l2_decay = 0.000001\n","max_length = 50\n","tk = Tokenizer(filters='!\"#$%&()*+,-./:;<=>?@[\\]^_`{\"}~\\t\\n')\n","\n","word_input = Input(shape = (6000,))\n","#word_input = tk.fit_on_texts(word_input)\n","vocab_size = len(tk.word_index) +1\n","#word_input = tk.texts_to_sequences(word_input)\n","#word_input = pad_sequences(word_input, maxlen=max_length, padding='post')\n","word_model = Sequential()(word_input)\n","word_model = Embedding(vocab_size, emb_dims, input_length=max_length, embeddings_regularizer = tf.keras.regularizers.l2(l2_decay))(word_model)\n","word_model = Bidirectional(LSTM(32, return_sequences=True), input_shape=(max_length, emb_dims))(word_model)\n","word_model = Bidirectional(LSTM(32))(word_model)\n","#word_model = Flatten()(word_model)\n","word_model = Dense(128, activation='relu')(word_model)\n","word_subnetwork = Model(inputs=word_input,outputs=word_model)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":852,"status":"ok","timestamp":1661452451838,"user":{"displayName":"Devraj Patel","userId":"05707629624884931355"},"user_tz":-330},"id":"g04qzl4udDgA","outputId":"faf942bc-7252-479a-e405-4ee41f46c820"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model_3\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 24, 1320, 1  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," conv2d (Conv2D)                (None, 22, 1318, 32  320         ['input_1[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 22, 1318, 32  128        ['conv2d[0][0]']                 \n"," alization)                     )                                                                 \n","                                                                                                  \n"," max_pooling2d (MaxPooling2D)   (None, 11, 659, 32)  0           ['batch_normalization[0][0]']    \n","                                                                                                  \n"," input_4 (InputLayer)           [(None, 6000)]       0           []                               \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 9, 657, 32)   9248        ['max_pooling2d[0][0]']          \n","                                                                                                  \n"," tf.cast (TFOpLambda)           (None, 6000)         0           ['input_4[0][0]']                \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 9, 657, 32)  128         ['conv2d_1[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," tf.compat.v1.nn.embedding_look  (None, 6000, 256)   0           ['tf.cast[0][0]']                \n"," up (TFOpLambda)                                                                                  \n","                                                                                                  \n"," max_pooling2d_1 (MaxPooling2D)  (None, 4, 328, 32)  0           ['batch_normalization_1[0][0]']  \n","                                                                                                  \n"," input_2 (InputLayer)           [(None, 6, 128, 128  0           []                               \n","                                , 3)]                                                             \n","                                                                                                  \n"," bidirectional (Bidirectional)  (None, 6000, 64)     73984       ['tf.compat.v1.nn.embedding_looku\n","                                                                 p[0][0]']                        \n","                                                                                                  \n"," flatten (Flatten)              (None, 41984)        0           ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," time_distributed (TimeDistribu  (None, 6, 512)      0           ['input_2[0][0]']                \n"," ted)                                                                                             \n","                                                                                                  \n"," bidirectional_1 (Bidirectional  (None, 64)          24832       ['bidirectional[0][0]']          \n"," )                                                                                                \n","                                                                                                  \n"," dense (Dense)                  (None, 128)          5374080     ['flatten[0][0]']                \n","                                                                                                  \n"," lstm (LSTM)                    (None, 64)           147712      ['time_distributed[0][0]']       \n","                                                                                                  \n"," dense_1 (Dense)                (None, 128)          8320        ['bidirectional_1[0][0]']        \n","                                                                                                  \n"," concatenate (Concatenate)      (None, 320)          0           ['dense[0][0]',                  \n","                                                                  'lstm[0][0]',                   \n","                                                                  'dense_1[0][0]']                \n","                                                                                                  \n"," dense_2 (Dense)                (None, 256)          82176       ['concatenate[0][0]']            \n","                                                                                                  \n"," dense_3 (Dense)                (None, 5)            1285        ['dense_2[0][0]']                \n","                                                                                                  \n","==================================================================================================\n","Total params: 5,722,213\n","Trainable params: 5,722,085\n","Non-trainable params: 128\n","__________________________________________________________________________________________________\n"]}],"source":["combined = Concatenate()([audio_subnetwork.output, visual_subnetwork.output, word_subnetwork.output])\n","final1 = Dense(256, activation='relu')(combined)\n","final2 = Dense(5, activation='linear')(final1)\n","combined_network = Model(inputs=[audio_input, visual_model,word_input], outputs=final2)\n","combined_network.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VZsuiFHadEeP"},"outputs":[],"source":["combined_network.compile(optimizer = 'adam',loss = 'mean_absolute_error',metrics=['mae'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"7tzgYAoLdN8c"},"outputs":[],"source":["%pdb on\n","from keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(patience=10)\n","history = combined_network.fit(x = [train_input[0],train_input[1]],\n","                               y = train_input[2],\n","                               validation_data = ([validation_input[0],validation_input[1]],validation_input[2]),\n","                               epochs = 20,\n","                               verbose = 1, callbacks = [early_stopping])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xaDxoLLadaEA"},"outputs":[],"source":["plt.figure(figsize=(9,4))\n","plt.subplot(1,2,1)\n","plt.plot(history.history['mae'])\n","plt.plot(history.history['val_mae'])\n","plt.title('Model MAE')\n","plt.ylabel('MAE')\n","plt.xlabel('Epoch')\n","plt.legend(['Train MAE', 'Validation MAE'], loc='upper right')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ObHZ9eAOdcJC"},"outputs":[],"source":["loss, mae = combined_network.evaluate([test_input[0],test_input[1]],test_input[2], verbose=0)\n","print('Test loss: {}'.format(loss))"]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/gpu.ipynb","timestamp":1634058591719}],"machine_shape":"hm"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}